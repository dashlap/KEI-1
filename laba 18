#1
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>

void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	int a, b, c;
	
	int p;

	scanf_s("%d%d%d", &a, &b, &c);
	printf("ввели: %d, %d, %d\n", a, b, c);

	p = a * b * c;
	printf("p =  %d\n", p);
}

#2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>

void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	int a, b, c;
	
	int p;
	FILE* fin = fopen("in.txt", "rt");
	fscanf(fin, "%d%d%d", &a, &b, &c);
	fclose(fin);

	
	printf("ввели: %d, %d, %d\n", a, b, c);

	p = a * b * c;
	printf("p =  %d\n", p);

	FILE* fout;
	fout = fopen("out.txt", "wt");
	fprintf(fout, "%d", p);
	fclose(fout);

}

#3-4
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>

void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	int a, b, c, d, e;
	
	int p;
	FILE* fin = fopen("in.txt", "rt");
	fscanf_s(fin, "%d%d%d%d%d", &a, &b, &c, &d, &e);
	fclose(fin);

	
	printf("ввели: %d, %d, %d, %d, %d\n", a, b, c, d, e);

	p = a + b + c + d + e;
	printf("p =  %d\n", p);

	FILE* fout;
	fout = fopen("out.txt", "wt");
	fprintf(fout, "%d", p);
	fclose(fout);

}

#5
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>

void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	int arr[10];
	int n;
	int i;

	
	FILE* fin = fopen("in.txt", "rt");
	fscanf_s(fin, "%d", &n);
	for (i = 0; i < n; i++) {
		fscanf_s(fin, "%d", &arr[i]);
	}
	fclose(fin);

	
	printf("ввели: arr[%d] = ", n);
	for (i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	int s = 0;
	for (i = 0; i < n; i++) {
		s += arr[i];
	}
	float sa = (float)s / n;

	printf("\nsa =  %f\n", sa);
	for (i = 0; i < n; i++) {
		if (arr[i] > sa) {
			arr[i] *= 10;
		}
	}
	printf("вывели: arr[%d] = ", n);
	for (i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	FILE* fout;
	fout = fopen("out.txt", "wt");
	fprintf(fout, "%d\n", n);
	for (i = 0; i < n; i++) {
		fprintf(fout, "%d ", arr[i]);
	}
	fclose(fout);

}

#6
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>

void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	
	int arr[10];
	int n;
	int i;

	
	FILE* fin = fopen("in.txt", "rt");
	fscanf_s(fin, "%d", &n);
	for (i = 0; i < n; i++) {
		fscanf_s(fin, "%d", &arr[i]);
	}
	fclose(fin);

	
	printf("ввели: arr[%d] = ", n);
	for (i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	int s = 0;
	for (i = 0; i < n; i++) {
		s += arr[i];
	}
	float sa = (float)s / n;

	printf("\nsa =  %f\n", sa);
	for (i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			if (arr[i] < sa) {
				arr[i] /= 2;
			}
		}
	}
	printf("вывели: arr[%d] = ", n);
	for (i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	FILE* fout;
	fout = fopen("out.txt", "wt");
	fprintf(fout, "%d\n", n);
	for (i = 0; i < n; i++) {
		fprintf(fout, "%d ", arr[i]);
	}
	fclose(fout);

}

#7-8
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>

#define NUM_ELEMENTS 100

int arr[NUM_ELEMENTS];
int n = 0;

void printElements() {

	printf("< ");
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	printf(">\n");
}
void keyboardInput() {
	printf("n = ");
	scanf_s("%d", &n);

	printf("Введите %d значений массива: ", n);
	for (int i = 0; i < n; i++) {
		scanf_s("%d", &arr[i]);
	}
}
void oddsx10() {

	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 1) {
			arr[i] = arr[i] * 10;
		}
	}
}
int findMin() {
	int min = arr[0];
	for (int i = 0; i < n; i++) {
		if (arr[i] < min) {
			min = arr[i];
		}
	}
	return min;
}
int Elements_min10() {
	int a = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] > 10) {
			a++;
		}
	}
	return a;
}
int findLastEven() {

	int indexMax = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			if (i > indexMax) {
				indexMax = i;
			}
		}
	}
	return indexMax;
}
void oddsX_1() {

	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			arr[i] = arr[i] * -1;
		}
	}
}
int findIndexMax() {
	int max = arr[0];
	int indexMax = 0;
	for (int i = 1; i < n; i++) {
		if (arr[i] > max) {
			max = arr[i];
			indexMax = i;
		}
	}
	return indexMax;
}
int findIndexMin() {
	int min = arr[0];
	int indexMin = 0;

	for (int i = 1; i < n; i++) {
		if (arr[i] < min) {
			min = arr[i];
			indexMin = i;
		}
	}
	return indexMin;
}
void switch4() {

	for (int i = 0; i < n; i++) {
		if (arr[i] < 4) {
			arr[i] = 4;
		}
	}
}
int findFirstEven() {

	int min = arr[0];
	int indexMin = 0;

	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			if (arr[i] < min) {
				min = arr[i];
				indexMin = i;
			}
		}
	}
	return indexMin;
}
void deleteElement(int index) {
	for (int i = index; i < n - 1; i++) {
		arr[i] = arr[i + 1];
	}
	n--;
}
void insertElement(int index, int value) {
	for (int i = n; i > index; i--) {
		arr[i] = arr[i - 1];
	}
	n++;
	arr[index] = value;
}

void insertElementEven() {
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			insertElement(i, arr[i]);
			i++;
		}
	}
}
void deletEven() {
	int a = 0;
	for (int i = 0; i < n; i++) {
		if (arr[i] % 2 == 0) {
			a = i;
			if (a >= 0) {
				deleteElement(a);
			}
		}
	}

}
void deletEven2_0() {
	int i = 0;
	do {
		deletEven();
		i++;
	} while (i <= n);
}
void Task7() {

	int value = findIndexMin();
	insertElement(0, arr[value]);

}
void Task8() {

	for (int i = 0; i < n; i++) {
		if (arr[i] < 4) {
			deleteElement(i);
		}
	}
}
void Task82_0() {
	int i = 0;
	do {
		Task8();
		i++;
	} while (i <= n);
}
void SaveStatus() {

	int i;
	FILE* fout;
	fout = fopen("in.txt", "wt");
	if (fout == NULL) {
		printf("Файл не создан");
		return;
	}
	fprintf(fout, "%d\n", n);
	for (i = 0; i < n; i++) {
		fprintf(fout, "%d ", arr[i]);
	}
	fclose(fout);

}
void LoadStatus() {
	int i;
	FILE* fin = fopen("in.txt", "rt");
	if (fin == NULL) {
		printf("Файл не создан");
		return;
	}
	fscanf_s(fin, "%d", &n);
	for (i = 0; i < n; i++) {
		fscanf_s(fin, "%d ", &arr[i]);
	}
	fclose(fin);
}

void main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int item;
	do {
		printf("\n");
		printf("------------------------------\n");
		printf("Содержимое массива:");
		printElements();
		printf("Выберите нужную вам операцию:\n");
		printf("1: Ввести с клавиатуры массив\n");
		printf("2: x10 для всех нечётных элементов\n");
		printf("3: Найти минимальный элемент\n");
		printf("4: Сколько элементов > 10\n");
		printf("5: х2 для последнего чётного\n");
		printf("6: Сколько чётных левее минимального\n");
		printf("7: х10 для нечётых правее минимального\n");
		printf("8: Переставить местами min и max\n");
		printf("11: Удалить заданный элемент.\n");
		printf("12: Вставить новый элемент в заданное место.\n");
		printf("13: Удалить минимальный элемент.\n");
		printf("14: Перед минимальным элементом, вставить 0.\n");
		printf("15: Удалить все чётные элементы\n");
		printf("16: Продублировать все чётные элементы\n");
		printf("17: Добавить в начало элемент, равный минимальному\n");
		printf("18: Удалить из массива все элементы, значение которых меньше 4\n");
		printf("19: Сохранить значения массива\n");
		printf("20: Загрузить значения массива\n");

		printf("\n");
		printf("0: Выйти из программы\n");
		printf("Выбранная операция >>>>>> ");

		scanf_s("%d", &item);

		switch (item) {
		case 1:
			keyboardInput();
			break;
		case 2:
			oddsx10();
			break;
		case 3:
		{
			int min = findMin();
			printf("min = %d\n", min);
		}
		break;
		case 4:
		{
			int a = Elements_min10();
			printf("%d элементов > 10\n", a);
		}
		break;
		case 5:
		{
			int max = findLastEven();
			if (max >= 0) {
				arr[max] *= 2;
			}
		}
		break;
		case 6:
		{
			int index = findIndexMin();
			printf("Индекс минимального элемента = %d\n", index);

			int cnt = 0;
			for (int i = 0; i < index; i++) {
				if (arr[i] % 2 == 0) {
					cnt++;
				}
			}
			printf("Левее минимального %d чётных чисел\n", cnt);
		}
		break;
		case 7:
		{
			int index = findIndexMin();
			printf("Индекс минимального элемента = %d\n", index);


			for (int i = index + 1; i < n; i++) {
				if (arr[i] % 2 == 1) {
					arr[i] *= 10;
				}
			}
		}
		break;
		case 8:
		{
			int indexMin = findIndexMin();
			printf("Индекс минимального элемента = %d\n", indexMin);
			int indexMax = findIndexMax();
			printf("Индекс максимального элемента = %d\n", indexMax);

			int tmp = arr[indexMin];
			arr[indexMin] = arr[indexMax];
			arr[indexMax] = tmp;

		}
		break;
		case 9:
			oddsX_1();
			break;
		case 10:
			switch4();
			break;
		case 11:
		{
			printf("Индекс удаляемого элемента - \n");
			int index;
			scanf_s("%d", &index);

			deleteElement(index);
		}
		break;
		case 12:
		{
			printf("Перед каким элементом нужно вставить новый? Индекс - \n");
			int index;
			scanf_s("%d", &index);

			printf("Значение, которое нужно вставить - \n");
			int value;
			scanf_s("%d", &value);
			insertElement(index, value);

		}
		break;
		case 13:
		{
			int min = findMin();
			printf("min = %d\n", min);
			deleteElement(min);

		}
		break;
		case 14:
		{
			int min = findIndexMin();
			printf("Индекс минимального элемента = %d\n", min);
			insertElement(min, 0);
		}
		break;
		case 15:
			deletEven2_0();
			break;
		case 16:
			insertElementEven();
			break;
		case 17:
			Task7();
			break;
		case 18:
			Task82_0();
			break;
		case 19:
			SaveStatus();
			break;
		case 20:
			LoadStatus();
			break;

			break;

		}

	} while (item != 0);
}

